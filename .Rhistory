family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.fit <- glm(
crim01 ~ . -crim - crim01,
data = Boston,
family = binomial,
subset = train
)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.fit <- glm(
crim01 ~ .,
data = Boston,
family = binomial,
subset = train
)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.fit <- glm(
crim01 ~ . -crim - crim01 - tax - chas,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.fit <- glm(
crim01 ~ . -crim -crim01 -tax -chas,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
crim01 <- rep(0, length(crim))
crim01[crim > median(crim)] <- 1
Boston <- data.frame(Boston, crim01)
train <- 1:(length(crim) / 2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim01.test <- crim01[test]
fit.glm <- glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
probs <- predict(fit.glm, Boston.test, type = "response")
probs <- predict(glm.fit, Boston.test, type = "response")
rm(list = ls())
crim01 <- rep(0, length(crim))
crim01[crim > median(crim)] <- 1
Boston <- data.frame(Boston, crim01)
train <- 1:(length(crim) / 2)
test <- (length(crim) / 2 + 1):length(crim)
Boston.train <- Boston[train, ]
Boston.test <- Boston[test, ]
crim01.test <- crim01[test]
fit.glm <- glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
probs <- predict(glm.fit, Boston.test, type = "response")
probs <- predict(fit.glm, Boston.test, type = "response")
rm(list = ls())
attach(Boston)
data("Boston")
attach(Boston)
rm(list = ls())
data("Boston")
attach(Boston)
data("Boston")
library(MASS)
data("Boston")
attach(Boston)
head(Boston)
crim01 <- as.integer(crim > median(crim))
crim01a <- rep(0, length(crim))
crim01[crim > median(crim)] <- 1
crim01a[crim > median(crim)] <- 1
crim01 <- as.integer(crim > median(crim))
table(crim01, crim01a)
Boston$crim01 <- crim01
train <- 1:(length(crim01)/2)
train <- 1:(length(crim) / 2)
train <- 1:(length(crim01)/2)
Boston.train <- Boston[train, ]
Boston.test <- Boston[-train, ]
crim01.test <- crim01[-train]
glm.fit <- glm(
crim01 ~ . -crim -crim01 -tax -chas,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
library(MASS)
data("Boston")
attach(Boston)
head(Boston)
crim01 <- as.integer(crim > median(crim))
Boston$crim01 <- crim01
train <- 1:(length(crim01)/2)
Boston.train <- Boston[train, ]
Boston.test <- Boston[-train, ]
crim01.test <- crim01[-train]
glm.fit <- glm(
crim01 ~ . -crim -crim01 -tax -chas,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.pred <- rep(0, length(crim01.test))
glm.pred[glm.pred > 0.5] <- 1
table(glm.pred, crim01.test)
summary(glm.probs)
glm.pred[glm.probs > 0.5] <- 1
table(glm.pred, crim01.test)
glm.fit <- glm(
crim01 ~ . -crim -crim01,
data = Boston,
family = binomial,
subset = train
)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.pred <- rep(0, length(crim01.test))
glm.pred[glm.probs > 0.5] <- 1
table(glm.pred, crim01.test)
mean(glm.pred == crim01.test)
mean(glm.pred != crim01.test)
lda.fit <- lda(
crim01 ~ . -crim -crim01,
data = Boston,
subset = train
)
lda.pred <- predict(
lda.fit,
Boston.test
)
plot(lda.fit)
lda.pred <- predict(
lda.fit,
Boston.test
)
lda.class <- lda.pred$class
table(lda.class, crim01.test)
glm.fit <- glm(
crim01 ~ . -crim -crim01 -chas - nox,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.fit <- glm(
crim01 ~ . -crim -crim01,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
pairs(Boston)
cor(Boston)
glm.fit <- glm(
crim01 ~ . -crim -crim01,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.fit <- glm(
crim01 ~ . -crim -crim01 -chas,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.pred <- rep(0, length(crim01.test))
glm.pred[glm.probs > 0.5] <- 1
table(glm.pred, crim01.test)
glm.fit <- glm(
crim01 ~ . -crim -crim01 -chas -nox,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.pred <- rep(0, length(crim01.test))
glm.pred[glm.probs > 0.5] <- 1
table(glm.pred, crim01.test)
glm.fit <- glm(
crim01 ~ . -crim -crim01 -chas -nox -tax,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.pred <- rep(0, length(crim01.test))
glm.pred[glm.probs > 0.5] <- 1
table(glm.pred, crim01.test)
glm.fit <- glm(
crim01 ~ . -crim -crim01 -chas -nox -tax -lstat,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.pred <- rep(0, length(crim01.test))
glm.pred[glm.probs > 0.5] <- 1
table(glm.pred, crim01.test)
glm.fit <- glm(
crim01 ~ . -crim -crim01 -chas -tax -lstat,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.pred <- rep(0, length(crim01.test))
glm.pred[glm.probs > 0.5] <- 1
table(glm.pred, crim01.test)
mean(glm.pred != crim01.test) #Test error rate
glm.fit <- glm(
crim01 ~ . -crim -crim01 -chas -nox -tax -lstat,
data = Boston,
family = binomial,
subset = train
)
summary(glm.fit)
glm.probs <- predict(
glm.fit,
newdata = Boston.test,
type = "response"
)
glm.pred <- rep(0, length(crim01.test))
glm.pred[glm.probs > 0.5] <- 1
table(glm.pred, crim01.test)
mean(glm.pred != crim01.test) #Test error rate
lda.fit <- lda(
crim01 ~ . -crim -crim01,
data = Boston,
subset = train
)
plot(lda.fit)
lda.pred <- predict(
lda.fit,
Boston.test
)
lda.class <- lda.pred$class
table(lda.class, crim01.test)
lda.fit <- lda(
crim01 ~ . -crim -crim01 -chas -nox -tax -lstat,
data = Boston,
subset = train
)
plot(lda.fit)
lda.pred <- predict(
lda.fit,
Boston.test
)
lda.class <- lda.pred$class
table(lda.class, crim01.test)
mean(lda.class != crim01.test) #Test error rate
qda.fit <- qda(
crim01 ~ . -crim -cim01 -chas -nox -tax -lstat,
data = Boston,
subset = train
)
plot(qda.fit)
qda.fit <- qda(
crim01 ~ . -crim -crim01 -chas -nox -tax -lstat,
data = Boston,
subset = train
)
plot(qda.fit)
qda.pred <- predict(
qda.fit,
Boston.test
)
qda.class <- qda.pred$class
table(qda.class, crim01.test)
mean(qda.class != crim01.test)
train.X <- Boston.train[-c(crim)]
train.X <- Boston.train[-c(crim, crim01, chas, nox, tax, lstat)]
train.X <- Boston.train[,-c(crim, crim01, chas, nox, tax, lstat)]
names(Boston.train)
train.X <- Boston.train[,-c(1, 4, 5, 10, 13, 15)]
test.X <- Boston.test[, -c(1, 4, 5, 10, 13, 15)]
train.crim01 <- crim01[train]
library(class)
knn.pred <- knn(
train.X,
test.X,
train.crim01,
k = 1
)
table(knn.pred, crim01.test)
mean(knn.pred != crim01.test) #Test error rate
knn.pred <- knn(
train.X,
test.X,
train.crim01,
k = 5
)
table(knn.pred, crim01.test)
mean(knn.pred != crim01.test) #Test error rate
mean(knn.pred != crim01.test)
for(k in c(1, 5, 10, 50, 100)) {
print(k)
mean(knn.pred != crim01.test)
}
print(mean(knn.pred != crim01.test))
for(k in c(1, 5, 10, 50, 100)) {
print(k)
print(mean(knn.pred != crim01.test))
}
for(k in c(1, 5, 10, 50, 100)) {
print(k)
knn.pred <- knn(
train.X,
test.X,
train.crim01,
k = k
)
print(mean(knn.pred != crim01.test))
}
train.X <- Boston.train[,-c(1, 15)]
test.X <- Boston.test[, -c(1, 15)]
train.crim01 <- crim01[train]
for(k in c(1, 5, 10, 50, 100)) {
print(k)
knn.pred <- knn(
train.X,
test.X,
train.crim01,
k = k
)
print(mean(knn.pred != crim01.test))
}
library(ISLR)
fix(Hitters)
?fix
names(Hitters)
dim(Hitters)
sum(is.na(Hitters))
sum(is.na(Hitters$Salary))
Hitters <- na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
sum(is.na(Hitters))
library(leaps)
install.packages('leaps')
library(leaps)
regfit.full <- regsubsets(Salary ~ ., Hitters)
summary(regfit.full)
regfit.full <- regsubsets(Salary ~ ., Data = Hitters, nvmax = 19)
regfit.full <- regsubsets(Salary ~ ., data = Hitters, nvmax = 19)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$rsq
par(mfrow = c(2,2))
plot(reg.summary$rss, xlab = "Number of Variables",
ylab = "RSS",
type = 'l')
plot(reg.summary$adjr2,
xlab = "Number of Variables",
ylab = "Adjusted RSq",
type = 'l')
which.max(reg.summary$adjr2)
points(11, reg.summary$adjr2[11], col = "red", cex = 2, pch = 20)
plot(reg.summary$cp,
xlab = "Number of Variables",
ylab = "Cp",
type = 'l')
which.min(reg.summary$cp)
points(10, reg.summar$cp[10], col = "red", cex = 2, pch = 20)
points(10, reg.summary$cp[10], col = "red", cex = 2, pch = 20)
which.min(reg.summary$bic)
plot(reg.summary$bic,
xlab = "Number of Variables",
ylab = "BIC",
type = "l")
points(6, reg.summary$bic[6], col = "red", cex = 2, pch = 20)
plot(regfit.full, scale = "r2")
library(randomForest)
typeof(Hitters)
class(Hitters)
?typeof
?type
type(Hitters)
typeof(Hitters)
plot(regfit.full, scale = "adjr2")
plot(regfit.full, scale = "Cp")
plot(regfit.full, scale = "bic")
coef(regfit.full, 6)
regfit.fwd <- regsubsets(Salary ~ .,
data = Hitters,
nvmax = 19,
method = "forward")
summary(regfit.fwd)
coef(regfit.fwd)
names(summary(regfit.full))
regfit.bwd <- regsubsets(Salary ~ .,
data = Hitters,
nvmax = 19,
method = "backward")
summary(regfit.bwd)
coef(regfit.full, 7)
coef(regfit.fwd, 7)
coef(regfit.bwd, 7)
set.seed(1)
train <- sample(c(TRUE, FALSE), nrow(Hitters), rep = TRUE)
test <- (!train)
regfit.best <- regsubsets(Salary ~ .,
data = Hitters[train, ],
nvmax = 19)
test.mat <- model.matrix(Salary ~ .,
data = Hitters[test, ])
test.mat
val.errors <- rep(NA, 19)
val.errors[i] = mean((Hitters$Salary[test] - pred) ^ 2)
for (i in 1:19) {
coefi = coef(regfit.best, id = i)
pred = test.mat[,names(coefi)] %*% coefi
val.errors[i] = mean((Hitters$Salary[test] - pred) ^ 2)
}
val.errors
which.min(val.errors)
coef(regfit.best,10)
names(coefi)
names(coef(regfit.best, id = 3))
R.version
source('~/DataScience/ISLR/6_LinearModelSelection.R')
predict.regsubsets <- function(object, newdata, id, ...) {
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id = id)
xvars <- names(coefi)
mat[, xvars] %*% coefi
}
?model.matrix
ff <- log(Volume) ~ log(Height) + log(Girth)
utils::str(m <- model.frame(ff, trees))
mat <- model.matrix(ff, m)
mm
mat
test.mat
Hitters[test,]
regfit.best
summary(regfit.best)
regfit.best[1]
coef(regfit.best, 2)
coef(regfit.best, 3)
test.mat
test.mat[,names(coef(regfit.best, 3))]
test.mat[,names(coef(regfit.best, 3))] *%*% coef(regfit.best, 3)
test.mat[,names(coef(regfit.best, 3))] %*% coef(regfit.best, 3)
pred
pred
regfit.best$call
regfit.best$call[2]
regfit.best <- regsubsets(Salary ~ .,
data = Hitters,
nvmax = 19)
coef(regfit.best, 10)
